                   __
                  / _)
         _.----._/ /    dc0x13
        /         /     part of `ez-sp` project.
     __/ (  | (  |      Mar 22 2025
    /__.-'|_|--|_|

    This file is about the implementation; To know full usage of the program type:
    $ cd source
    $ make
    $ ./ez-sp --help

    ~*~

    ez-sp is a simple spread-sheet implementation for bash, the program is pretty simple, it
    takes a file of any extension as input, it lexes the content, parses it and finally prints
    the final table in stdout unless other thing is specified throught the execution arguments

    the table the program recives should look something like this:

    <cell> | <cell>   |
    <cell> | <cell>   | <cell>   |
    <cell> | <cell>   |
           ` this is a separator, it allows the lexer to know we're no longer in that cell
           but rather we need to advance to the next one.

    The separator must always be after all tokens defined in the cell, altough the default
    separator is `|` the user can modify it by using `--sep` programs's flag, which indicates
    what to use as separator, it can be anything, but for sure it should be something practical.

    The user can see what tokens were found by using `--debug` program's flag, if this is indicated
    the program will print every single token found within the source.

    Talking about tokens would take so long, so let's talk about cells instead; a cell can be either

    * string literal
    * number literal
    * boolean literal
    * some error

    How does the parser know what's gonna be the current cell's kind? When the lexer is on a new cell
    and it founds the very first token for such cell, the lexer will make sure such token makes something
    relevant as a first token, for example

    "this is a first token" |           vs          ==  |
      |                                             |
      ` this is a relevant first token              ` this does not mean anything as a first token,
        since it will define the cell as              this kind of tokens just make sense within an
        a string literal                              expression, so if the lexer sees this it will
                                                      stop the execution of the program and throw and error
    
    A valid first token is either:

    * string literal            "hi"                    |
    * number literal            3.1416                  |
    * boolean literal           T                       |
    * expression maker          =4 + 4                  | (equal sign is used to indicate a math expression)
    * conditional               ?4 == 4 ; "yes" ; "no"  | (question sign is used to indicate a conditional)
    * referece to another cell  @a0                     | (as long as this refrece was already solved)

    if the first token is a literal, the value of the token itself will be transfered to the cell, for example

    "this is"   | "something"   |      it produces      this is  something
    3.14        | @a0           |       immediatly      3.14     this is

    if the first token is a expression maker (=), the program will use the shunting yard algorithm
    to convert the expression in something easier to deal with, for example

    =4 + 3 * 2      will be turned into     3 * 3 + 4

    in this way is easier to evaluate expressions without worrying about precedence and parentheis
    stuff...
